// WARNING: This file has automatically been generated on Mon, 21 Oct 2024 23:38:34 EDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package lib

/*
#cgo linux LDFLAGS: -Wl,--export-dynamic -Wl,--unresolved-symbols=ignore-in-object-files
#cgo darwin LDFLAGS: -Wl,-undefined,dynamic_lookup
#include "cndev.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// GetErrorString function as declared in lib/cndev.h:114
func GetErrorString(ErrorId Ret_t) *byte {
	cErrorId, cErrorIdAllocMap := (C.cndevRet_t)(ErrorId), cgoAllocsUnknown
	__ret := C.cndevGetErrorString(cErrorId)
	runtime.KeepAlive(cErrorIdAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// Init function as declared in lib/cndev.h:723
func Init(Reserved int32) Ret_t {
	cReserved, cReservedAllocMap := (C.int)(Reserved), cgoAllocsUnknown
	__ret := C.cndevInit(cReserved)
	runtime.KeepAlive(cReservedAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// Release function as declared in lib/cndev.h:732
func Release() Ret_t {
	__ret := C.cndevRelease()
	__v := (Ret_t)(__ret)
	return __v
}

// GetDeviceCount function as declared in lib/cndev.h:744
func GetDeviceCount(CardNum *CardInfo_t) Ret_t {
	cCardNum, cCardNumAllocMap := (*C.cndevCardInfo_t)(unsafe.Pointer(CardNum)), cgoAllocsUnknown
	__ret := C.cndevGetDeviceCount(cCardNum)
	runtime.KeepAlive(cCardNumAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetPCIeInfo function as declared in lib/cndev.h:760
func GetPCIeInfo(DeviceInfo *PCIeInfo_t, DevId int32) Ret_t {
	cDeviceInfo, cDeviceInfoAllocMap := (*C.cndevPCIeInfo_t)(unsafe.Pointer(DeviceInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetPCIeInfo(cDeviceInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cDeviceInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMemoryUsage function as declared in lib/cndev.h:776
func GetMemoryUsage(MemInfo *MemoryInfo_t, DevId int32) Ret_t {
	cMemInfo, cMemInfoAllocMap := (*C.cndevMemoryInfo_t)(unsafe.Pointer(MemInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetMemoryUsage(cMemInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cMemInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetVersionInfo function as declared in lib/cndev.h:793
func GetVersionInfo(VersInfo *VersionInfo_t, DevId int32) Ret_t {
	cVersInfo, cVersInfoAllocMap := (*C.cndevVersionInfo_t)(unsafe.Pointer(VersInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetVersionInfo(cVersInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cVersInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetECCInfo function as declared in lib/cndev.h:810
func GetECCInfo(EccInfo *ECCInfo_t, DevId int32) Ret_t {
	cEccInfo, cEccInfoAllocMap := (*C.cndevECCInfo_t)(unsafe.Pointer(EccInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetECCInfo(cEccInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cEccInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetPowerInfo function as declared in lib/cndev.h:827
func GetPowerInfo(PowerInfo *PowerInfo_t, DevId int32) Ret_t {
	cPowerInfo, cPowerInfoAllocMap := (*C.cndevPowerInfo_t)(unsafe.Pointer(PowerInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetPowerInfo(cPowerInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cPowerInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetFrequencyInfo function as declared in lib/cndev.h:844
func GetFrequencyInfo(FreqInfo *FrequencyInfo_t, DevId int32) Ret_t {
	cFreqInfo, cFreqInfoAllocMap := (*C.cndevFrequencyInfo_t)(unsafe.Pointer(FreqInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetFrequencyInfo(cFreqInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cFreqInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetTemperatureInfo function as declared in lib/cndev.h:861
func GetTemperatureInfo(TempInfo *TemperatureInfo_t, DevId int32) Ret_t {
	cTempInfo, cTempInfoAllocMap := (*C.cndevTemperatureInfo_t)(unsafe.Pointer(TempInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetTemperatureInfo(cTempInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cTempInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetLLCInfo function as declared in lib/cndev.h:877
func GetLLCInfo(LlcInfo *LLCInfo_t, DevId int32) Ret_t {
	cLlcInfo, cLlcInfoAllocMap := (*C.cndevLLCInfo_t)(unsafe.Pointer(LlcInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetLLCInfo(cLlcInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cLlcInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetDeviceUtilizationInfo function as declared in lib/cndev.h:894
func GetDeviceUtilizationInfo(UtilInfo *UtilizationInfo_t, DevId int32) Ret_t {
	cUtilInfo, cUtilInfoAllocMap := (*C.cndevUtilizationInfo_t)(unsafe.Pointer(UtilInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetDeviceUtilizationInfo(cUtilInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cUtilInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetFanSpeedInfo function as declared in lib/cndev.h:911
func GetFanSpeedInfo(FanInfo *FanSpeedInfo_t, DevId int32) Ret_t {
	cFanInfo, cFanInfoAllocMap := (*C.cndevFanSpeedInfo_t)(unsafe.Pointer(FanInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetFanSpeedInfo(cFanInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cFanInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetProcessInfo function as declared in lib/cndev.h:930
func GetProcessInfo(InfoCount *uint32, ProcInfo *ProcessInfo_t, DevId int32) Ret_t {
	cInfoCount, cInfoCountAllocMap := (*C.uint)(unsafe.Pointer(InfoCount)), cgoAllocsUnknown
	cProcInfo, cProcInfoAllocMap := (*C.cndevProcessInfo_t)(unsafe.Pointer(ProcInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetProcessInfo(cInfoCount, cProcInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cProcInfoAllocMap)
	runtime.KeepAlive(cInfoCountAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetLibVersion function as declared in lib/cndev.h:945
func GetLibVersion(LibVerInfo *LibVersionInfo_t) Ret_t {
	cLibVerInfo, cLibVerInfoAllocMap := (*C.cndevLibVersionInfo_t)(unsafe.Pointer(LibVerInfo)), cgoAllocsUnknown
	__ret := C.cndevGetLibVersion(cLibVerInfo)
	runtime.KeepAlive(cLibVerInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetCoreCount function as declared in lib/cndev.h:961
func GetCoreCount(CardCoreCount *CardCoreCount_t, DevId int32) Ret_t {
	cCardCoreCount, cCardCoreCountAllocMap := (*C.cndevCardCoreCount_t)(unsafe.Pointer(CardCoreCount)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCoreCount(cCardCoreCount, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCardCoreCountAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetCodecCount function as declared in lib/cndev.h:977
func GetCodecCount(CodecCount *CodecCount_t, DevId int32) Ret_t {
	cCodecCount, cCodecCountAllocMap := (*C.cndevCodecCount_t)(unsafe.Pointer(CodecCount)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCodecCount(cCodecCount, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCodecCountAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetCodecUtilization function as declared in lib/cndev.h:993
func GetCodecUtilization(CodecUtilization *CodecUtilization_t, DevId int32) Ret_t {
	cCodecUtilization, cCodecUtilizationAllocMap := (*C.cndevCodecUtilization_t)(unsafe.Pointer(CodecUtilization)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCodecUtilization(cCodecUtilization, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCodecUtilizationAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetClusterCount function as declared in lib/cndev.h:1009
func GetClusterCount(ClusCount *CardClusterCount_t, DevId int32) Ret_t {
	cClusCount, cClusCountAllocMap := (*C.cndevCardClusterCount_t)(unsafe.Pointer(ClusCount)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetClusterCount(cClusCount, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cClusCountAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetLowestSupportDriverVersion function as declared in lib/cndev.h:1023
func GetLowestSupportDriverVersion(VersInfo *VersionInfo_t) Ret_t {
	cVersInfo, cVersInfoAllocMap := (*C.cndevVersionInfo_t)(unsafe.Pointer(VersInfo)), cgoAllocsUnknown
	__ret := C.cndevGetLowestSupportDriverVersion(cVersInfo)
	runtime.KeepAlive(cVersInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetCardName function as declared in lib/cndev.h:1039
func GetCardName(CardName *CardName_t, DevId int32) Ret_t {
	cCardName, cCardNameAllocMap := (*C.cndevCardName_t)(unsafe.Pointer(CardName)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCardName(cCardName, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCardNameAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetCardNameString function as declared in lib/cndev.h:1049
func GetCardNameString(CardName NameEnum_t) *byte {
	cCardName, cCardNameAllocMap := (C.cndevNameEnum_t)(CardName), cgoAllocsUnknown
	__ret := C.cndevGetCardNameString(cCardName)
	runtime.KeepAlive(cCardNameAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// GetCardNameStringByDevId function as declared in lib/cndev.h:1059
func GetCardNameStringByDevId(DevId int32) *byte {
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCardNameStringByDevId(cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// GetCardSN function as declared in lib/cndev.h:1085
func GetCardSN(CardSN *CardSN_t, DevId int32) Ret_t {
	cCardSN, cCardSNAllocMap := (*C.cndevCardSN_t)(unsafe.Pointer(CardSN)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCardSN(cCardSN, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCardSNAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetPCIethroughput function as declared in lib/cndev.h:1101
func GetPCIethroughput(Pciethroughput *PCIethroughput_t, DevId int32) Ret_t {
	cPciethroughput, cPciethroughputAllocMap := (*C.cndevPCIethroughput_t)(unsafe.Pointer(Pciethroughput)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetPCIethroughput(cPciethroughput, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cPciethroughputAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetDeviceAffinity function as declared in lib/cndev.h:1117
func GetDeviceAffinity(Affinity *Affinity_t, DevId int32) Ret_t {
	cAffinity, cAffinityAllocMap := (*C.cndevAffinity_t)(unsafe.Pointer(Affinity)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetDeviceAffinity(cAffinity, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cAffinityAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// ClearCurrentThreadAffinity function as declared in lib/cndev.h:1132
func ClearCurrentThreadAffinity(Version int32, DevId int32) Ret_t {
	cVersion, cVersionAllocMap := (C.int)(Version), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevClearCurrentThreadAffinity(cVersion, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// SetCurrentThreadAffinity function as declared in lib/cndev.h:1147
func SetCurrentThreadAffinity(Version int32, DevId int32) Ret_t {
	cVersion, cVersionAllocMap := (C.int)(Version), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevSetCurrentThreadAffinity(cVersion, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// TopologyGetRelationship function as declared in lib/cndev.h:1164
func TopologyGetRelationship(Relationship *TopologyRelationship_t, DevId1 int32, DevId2 int32) Ret_t {
	cRelationship, cRelationshipAllocMap := (*C.cndevTopologyRelationship_t)(unsafe.Pointer(Relationship)), cgoAllocsUnknown
	cDevId1, cDevId1AllocMap := (C.int)(DevId1), cgoAllocsUnknown
	cDevId2, cDevId2AllocMap := (C.int)(DevId2), cgoAllocsUnknown
	__ret := C.cndevTopologyGetRelationship(cRelationship, cDevId1, cDevId2)
	runtime.KeepAlive(cDevId2AllocMap)
	runtime.KeepAlive(cDevId1AllocMap)
	runtime.KeepAlive(cRelationshipAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// TopologyGetNearestDevices function as declared in lib/cndev.h:1184
func TopologyGetNearestDevices(Version int32, Rel TopologyRelationshipEnum_t, Count *uint64, DevIdArray *uint64, DevId int32) Ret_t {
	cVersion, cVersionAllocMap := (C.int)(Version), cgoAllocsUnknown
	cRel, cRelAllocMap := (C.cndevTopologyRelationshipEnum_t)(Rel), cgoAllocsUnknown
	cCount, cCountAllocMap := (*C.__uint64_t)(unsafe.Pointer(Count)), cgoAllocsUnknown
	cDevIdArray, cDevIdArrayAllocMap := (*C.__uint64_t)(unsafe.Pointer(DevIdArray)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevTopologyGetNearestDevices(cVersion, cRel, cCount, cDevIdArray, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cDevIdArrayAllocMap)
	runtime.KeepAlive(cCountAllocMap)
	runtime.KeepAlive(cRelAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// TopologyGetCpuRelatedDevices function as declared in lib/cndev.h:1203
func TopologyGetCpuRelatedDevices(Version int32, CpuId int32, Count *uint64, DevidArray *uint64) Ret_t {
	cVersion, cVersionAllocMap := (C.int)(Version), cgoAllocsUnknown
	cCpuId, cCpuIdAllocMap := (C.int)(CpuId), cgoAllocsUnknown
	cCount, cCountAllocMap := (*C.__uint64_t)(unsafe.Pointer(Count)), cgoAllocsUnknown
	cDevidArray, cDevidArrayAllocMap := (*C.__uint64_t)(unsafe.Pointer(DevidArray)), cgoAllocsUnknown
	__ret := C.cndevTopologyGetCpuRelatedDevices(cVersion, cCpuId, cCount, cDevidArray)
	runtime.KeepAlive(cDevidArrayAllocMap)
	runtime.KeepAlive(cCountAllocMap)
	runtime.KeepAlive(cCpuIdAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetCurrentPCIInfo function as declared in lib/cndev.h:1220
func GetCurrentPCIInfo(CurrentPCIInfo *CurrentPCIInfo_t, DevId int32) Ret_t {
	cCurrentPCIInfo, cCurrentPCIInfoAllocMap := (*C.cndevCurrentPCIInfo_t)(unsafe.Pointer(CurrentPCIInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCurrentPCIInfo(cCurrentPCIInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCurrentPCIInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// TopologyGetRelationshipByNode function as declared in lib/cndev.h:1237
func TopologyGetRelationshipByNode(Relationship *TopologyRelationship_t, Node1 *TopologyNode_t, Node2 *TopologyNode_t) Ret_t {
	cRelationship, cRelationshipAllocMap := (*C.cndevTopologyRelationship_t)(unsafe.Pointer(Relationship)), cgoAllocsUnknown
	cNode1, cNode1AllocMap := (*C.cndevTopologyNode_t)(unsafe.Pointer(Node1)), cgoAllocsUnknown
	cNode2, cNode2AllocMap := (*C.cndevTopologyNode_t)(unsafe.Pointer(Node2)), cgoAllocsUnknown
	__ret := C.cndevTopologyGetRelationshipByNode(cRelationship, cNode1, cNode2)
	runtime.KeepAlive(cNode2AllocMap)
	runtime.KeepAlive(cNode1AllocMap)
	runtime.KeepAlive(cRelationshipAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetNodeByBDF function as declared in lib/cndev.h:1257
func GetNodeByBDF(Version int32, TreeNode []*TopologyNode_t, Domain uint32, Bus uint32, Device uint32, Function uint32) Ret_t {
	cVersion, cVersionAllocMap := (C.int)(Version), cgoAllocsUnknown
	cTreeNode, cTreeNodeAllocMap := (**C.cndevTopologyNode_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&TreeNode)).Data)), cgoAllocsUnknown
	cDomain, cDomainAllocMap := (C.uint)(Domain), cgoAllocsUnknown
	cBus, cBusAllocMap := (C.uint)(Bus), cgoAllocsUnknown
	cDevice, cDeviceAllocMap := (C.uint)(Device), cgoAllocsUnknown
	cFunction, cFunctionAllocMap := (C.uint)(Function), cgoAllocsUnknown
	__ret := C.cndevGetNodeByBDF(cVersion, cTreeNode, cDomain, cBus, cDevice, cFunction)
	runtime.KeepAlive(cFunctionAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	runtime.KeepAlive(cBusAllocMap)
	runtime.KeepAlive(cDomainAllocMap)
	runtime.KeepAlive(cTreeNodeAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetDevIdByBDF function as declared in lib/cndev.h:1277
func GetDevIdByBDF(Version int32, DevId *int32, Domain uint32, Bus uint32, Device uint32, Function uint32) Ret_t {
	cVersion, cVersionAllocMap := (C.int)(Version), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (*C.int)(unsafe.Pointer(DevId)), cgoAllocsUnknown
	cDomain, cDomainAllocMap := (C.uint)(Domain), cgoAllocsUnknown
	cBus, cBusAllocMap := (C.uint)(Bus), cgoAllocsUnknown
	cDevice, cDeviceAllocMap := (C.uint)(Device), cgoAllocsUnknown
	cFunction, cFunctionAllocMap := (C.uint)(Function), cgoAllocsUnknown
	__ret := C.cndevGetDevIdByBDF(cVersion, cDevId, cDomain, cBus, cDevice, cFunction)
	runtime.KeepAlive(cFunctionAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	runtime.KeepAlive(cBusAllocMap)
	runtime.KeepAlive(cDomainAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetNodeByDevId function as declared in lib/cndev.h:1294
func GetNodeByDevId(Version int32, TreeNode []*TopologyNode_t, DevId int32) Ret_t {
	cVersion, cVersionAllocMap := (C.int)(Version), cgoAllocsUnknown
	cTreeNode, cTreeNodeAllocMap := (**C.cndevTopologyNode_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&TreeNode)).Data)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetNodeByDevId(cVersion, cTreeNode, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cTreeNodeAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// TopologyGetVirtualRootNode function as declared in lib/cndev.h:1309
func TopologyGetVirtualRootNode(Version int32, Root []*TopologyNode_t) Ret_t {
	cVersion, cVersionAllocMap := (C.int)(Version), cgoAllocsUnknown
	cRoot, cRootAllocMap := (**C.cndevTopologyNode_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Root)).Data)), cgoAllocsUnknown
	__ret := C.cndevTopologyGetVirtualRootNode(cVersion, cRoot)
	runtime.KeepAlive(cRootAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// TopologyTraverseTree function as declared in lib/cndev.h:1326
func TopologyTraverseTree(Version int32, Callback TRAVERSE_CALLBACK, Userdata unsafe.Pointer) Ret_t {
	cVersion, cVersionAllocMap := (C.int)(Version), cgoAllocsUnknown
	cCallback, cCallbackAllocMap := *(**[0]byte)(unsafe.Pointer(&Callback)), cgoAllocsUnknown
	cUserdata, cUserdataAllocMap := Userdata, cgoAllocsUnknown
	__ret := C.cndevTopologyTraverseTree(cVersion, cCallback, cUserdata)
	runtime.KeepAlive(cUserdataAllocMap)
	runtime.KeepAlive(cCallbackAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetNodeCapabilityInfo function as declared in lib/cndev.h:1341
func GetNodeCapabilityInfo(Capability *CapabilityInfo_t, TreeNode *TopologyNode_t) Ret_t {
	cCapability, cCapabilityAllocMap := (*C.cndevCapabilityInfo_t)(unsafe.Pointer(Capability)), cgoAllocsUnknown
	cTreeNode, cTreeNodeAllocMap := (*C.cndevTopologyNode_t)(unsafe.Pointer(TreeNode)), cgoAllocsUnknown
	__ret := C.cndevGetNodeCapabilityInfo(cCapability, cTreeNode)
	runtime.KeepAlive(cTreeNodeAllocMap)
	runtime.KeepAlive(cCapabilityAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetNodeByDeviceName function as declared in lib/cndev.h:1360
func GetNodeByDeviceName(Version int32, Count *int32, NodeArray *TopologyNode_t, DeviceName string) Ret_t {
	cVersion, cVersionAllocMap := (C.int)(Version), cgoAllocsUnknown
	cCount, cCountAllocMap := (*C.int)(unsafe.Pointer(Count)), cgoAllocsUnknown
	cNodeArray, cNodeArrayAllocMap := (*C.cndevTopologyNode_t)(unsafe.Pointer(NodeArray)), cgoAllocsUnknown
	cDeviceName, cDeviceNameAllocMap := unpackPCharString(DeviceName)
	__ret := C.cndevGetNodeByDeviceName(cVersion, cCount, cNodeArray, cDeviceName)
	runtime.KeepAlive(cDeviceNameAllocMap)
	runtime.KeepAlive(cNodeArrayAllocMap)
	runtime.KeepAlive(cCountAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetCardHealthState function as declared in lib/cndev.h:1376
func GetCardHealthState(CardHealthState *CardHealthState_t, DevId int32) Ret_t {
	cCardHealthState, cCardHealthStateAllocMap := (*C.cndevCardHealthState_t)(unsafe.Pointer(CardHealthState)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCardHealthState(cCardHealthState, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCardHealthStateAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetLowestLinkSpeed function as declared in lib/cndev.h:1392
func GetLowestLinkSpeed(Linkspeed *LinkSpeed_t, DevId int32) Ret_t {
	cLinkspeed, cLinkspeedAllocMap := (*C.cndevLinkSpeed_t)(unsafe.Pointer(Linkspeed)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetLowestLinkSpeed(cLinkspeed, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cLinkspeedAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetImageCodecUtilization function as declared in lib/cndev.h:1408
func GetImageCodecUtilization(Jpuutil *ImageCodecUtilization_t, DevId int32) Ret_t {
	cJpuutil, cJpuutilAllocMap := (*C.cndevImageCodecUtilization_t)(unsafe.Pointer(Jpuutil)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetImageCodecUtilization(cJpuutil, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cJpuutilAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetVideoCodecUtilization function as declared in lib/cndev.h:1424
func GetVideoCodecUtilization(Vpuutil *VideoCodecUtilization_t, DevId int32) Ret_t {
	cVpuutil, cVpuutilAllocMap := (*C.cndevVideoCodecUtilization_t)(unsafe.Pointer(Vpuutil)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetVideoCodecUtilization(cVpuutil, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cVpuutilAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetFastAlloc function as declared in lib/cndev.h:1440
func GetFastAlloc(Fastalloc *FastAlloc_t, DevId int32) Ret_t {
	cFastalloc, cFastallocAllocMap := (*C.cndevFastAlloc_t)(unsafe.Pointer(Fastalloc)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetFastAlloc(cFastalloc, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cFastallocAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetNUMANodeIdByTopologyNode function as declared in lib/cndev.h:1455
func GetNUMANodeIdByTopologyNode(NumaNodeId *NUMANodeId_t, TreeNode *TopologyNode_t) Ret_t {
	cNumaNodeId, cNumaNodeIdAllocMap := (*C.cndevNUMANodeId_t)(unsafe.Pointer(NumaNodeId)), cgoAllocsUnknown
	cTreeNode, cTreeNodeAllocMap := (*C.cndevTopologyNode_t)(unsafe.Pointer(TreeNode)), cgoAllocsUnknown
	__ret := C.cndevGetNUMANodeIdByTopologyNode(cNumaNodeId, cTreeNode)
	runtime.KeepAlive(cTreeNodeAllocMap)
	runtime.KeepAlive(cNumaNodeIdAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetScalerUtilization function as declared in lib/cndev.h:1471
func GetScalerUtilization(Scalerutil *ScalerUtilization_t, DevId int32) Ret_t {
	cScalerutil, cScalerutilAllocMap := (*C.cndevScalerUtilization_t)(unsafe.Pointer(Scalerutil)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetScalerUtilization(cScalerutil, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cScalerutilAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetCodecTurbo function as declared in lib/cndev.h:1487
func GetCodecTurbo(CodecTurbo *CodecTurbo_t, DevId int32) Ret_t {
	cCodecTurbo, cCodecTurboAllocMap := (*C.cndevCodecTurbo_t)(unsafe.Pointer(CodecTurbo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCodecTurbo(cCodecTurbo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCodecTurboAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMemoryDieCount function as declared in lib/cndev.h:1503
func GetMemoryDieCount(Memorydiecount *CardMemoryDieCount_t, DevId int32) Ret_t {
	cMemorydiecount, cMemorydiecountAllocMap := (*C.cndevCardMemoryDieCount_t)(unsafe.Pointer(Memorydiecount)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetMemoryDieCount(cMemorydiecount, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cMemorydiecountAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetQsfpddStatus function as declared in lib/cndev.h:1519
func GetQsfpddStatus(Qddstatus *QsfpddStatus_t, DevId int32) Ret_t {
	cQddstatus, cQddstatusAllocMap := (*C.cndevQsfpddStatus_t)(unsafe.Pointer(Qddstatus)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetQsfpddStatus(cQddstatus, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cQddstatusAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLULinkVersion function as declared in lib/cndev.h:1537
func GetMLULinkVersion(Version *MLULinkVersion_t, DevId int32, Link int32) Ret_t {
	cVersion, cVersionAllocMap := (*C.cndevMLULinkVersion_t)(unsafe.Pointer(Version)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cLink, cLinkAllocMap := (C.int)(Link), cgoAllocsUnknown
	__ret := C.cndevGetMLULinkVersion(cVersion, cDevId, cLink)
	runtime.KeepAlive(cLinkAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLULinkStatus function as declared in lib/cndev.h:1554
func GetMLULinkStatus(Status *MLULinkStatus_t, DevId int32, Link int32) Ret_t {
	cStatus, cStatusAllocMap := (*C.cndevMLULinkStatus_t)(unsafe.Pointer(Status)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cLink, cLinkAllocMap := (C.int)(Link), cgoAllocsUnknown
	__ret := C.cndevGetMLULinkStatus(cStatus, cDevId, cLink)
	runtime.KeepAlive(cLinkAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cStatusAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLULinkSpeedInfo function as declared in lib/cndev.h:1571
func GetMLULinkSpeedInfo(Speed *MLULinkSpeed_t, DevId int32, Link int32) Ret_t {
	cSpeed, cSpeedAllocMap := (*C.cndevMLULinkSpeed_t)(unsafe.Pointer(Speed)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cLink, cLinkAllocMap := (C.int)(Link), cgoAllocsUnknown
	__ret := C.cndevGetMLULinkSpeedInfo(cSpeed, cDevId, cLink)
	runtime.KeepAlive(cLinkAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cSpeedAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLULinkCapability function as declared in lib/cndev.h:1588
func GetMLULinkCapability(Capability *MLULinkCapability_t, DevId int32, Link int32) Ret_t {
	cCapability, cCapabilityAllocMap := (*C.cndevMLULinkCapability_t)(unsafe.Pointer(Capability)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cLink, cLinkAllocMap := (C.int)(Link), cgoAllocsUnknown
	__ret := C.cndevGetMLULinkCapability(cCapability, cDevId, cLink)
	runtime.KeepAlive(cLinkAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCapabilityAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLULinkCounter function as declared in lib/cndev.h:1605
func GetMLULinkCounter(Count *MLULinkCounter_t, DevId int32, Link int32) Ret_t {
	cCount, cCountAllocMap := (*C.cndevMLULinkCounter_t)(unsafe.Pointer(Count)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cLink, cLinkAllocMap := (C.int)(Link), cgoAllocsUnknown
	__ret := C.cndevGetMLULinkCounter(cCount, cDevId, cLink)
	runtime.KeepAlive(cLinkAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCountAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// ResetMLULinkCounter function as declared in lib/cndev.h:1622
func ResetMLULinkCounter(Setcount *MLULinkSetCounter_t, DevId int32, Link int32) Ret_t {
	cSetcount, cSetcountAllocMap := (*C.cndevMLULinkSetCounter_t)(unsafe.Pointer(Setcount)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cLink, cLinkAllocMap := (C.int)(Link), cgoAllocsUnknown
	__ret := C.cndevResetMLULinkCounter(cSetcount, cDevId, cLink)
	runtime.KeepAlive(cLinkAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cSetcountAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLULinkRemoteInfo function as declared in lib/cndev.h:1639
func GetMLULinkRemoteInfo(Remoteinfo *MLULinkRemoteInfo_t, DevId int32, Link int32) Ret_t {
	cRemoteinfo, cRemoteinfoAllocMap := (*C.cndevMLULinkRemoteInfo_t)(unsafe.Pointer(Remoteinfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cLink, cLinkAllocMap := (C.int)(Link), cgoAllocsUnknown
	__ret := C.cndevGetMLULinkRemoteInfo(cRemoteinfo, cDevId, cLink)
	runtime.KeepAlive(cLinkAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cRemoteinfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLULinkDevSN function as declared in lib/cndev.h:1654
func GetMLULinkDevSN(Devinfo *MLULinkDevSN_t, DevId int32) Ret_t {
	cDevinfo, cDevinfoAllocMap := (*C.cndevMLULinkDevSN_t)(unsafe.Pointer(Devinfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetMLULinkDevSN(cDevinfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cDevinfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetNUMANodeIdByDevId function as declared in lib/cndev.h:1668
func GetNUMANodeIdByDevId(NumaNodeId *NUMANodeId_t, DevId int32) Ret_t {
	cNumaNodeId, cNumaNodeIdAllocMap := (*C.cndevNUMANodeId_t)(unsafe.Pointer(NumaNodeId)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetNUMANodeIdByDevId(cNumaNodeId, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cNumaNodeIdAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetChassisInfo function as declared in lib/cndev.h:1682
func GetChassisInfo(Chassisinfo *ChassisInfo_t, DevId int32) Ret_t {
	cChassisinfo, cChassisinfoAllocMap := (*C.cndevChassisInfo_t)(unsafe.Pointer(Chassisinfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetChassisInfo(cChassisinfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cChassisinfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetPCIeFirmwareVersion function as declared in lib/cndev.h:1696
func GetPCIeFirmwareVersion(Version *PCIeFirmwareVersion_t, DevId int32) Ret_t {
	cVersion, cVersionAllocMap := (*C.cndevPCIeFirmwareVersion_t)(unsafe.Pointer(Version)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetPCIeFirmwareVersion(cVersion, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetUUID function as declared in lib/cndev.h:1710
func GetUUID(UuidInfo *UUID_t, DevId int32) Ret_t {
	cUuidInfo, cUuidInfoAllocMap := (*C.cndevUUID_t)(unsafe.Pointer(UuidInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetUUID(cUuidInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cUuidInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetDeviceCPUUtilization function as declared in lib/cndev.h:1724
func GetDeviceCPUUtilization(Util *DeviceCPUUtilization_t, DevId int32) Ret_t {
	cUtil, cUtilAllocMap := (*C.cndevDeviceCPUUtilization_t)(unsafe.Pointer(Util)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetDeviceCPUUtilization(cUtil, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cUtilAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetDeviceCPUSamplingInterval function as declared in lib/cndev.h:1738
func GetDeviceCPUSamplingInterval(Time *DeviceCPUSamplingInterval_t, DevId int32) Ret_t {
	cTime, cTimeAllocMap := (*C.cndevDeviceCPUSamplingInterval_t)(unsafe.Pointer(Time)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetDeviceCPUSamplingInterval(cTime, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cTimeAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// SetDeviceCPUSamplingInterval function as declared in lib/cndev.h:1752
func SetDeviceCPUSamplingInterval(Time *DeviceCPUSamplingInterval_t, DevId int32) Ret_t {
	cTime, cTimeAllocMap := (*C.cndevDeviceCPUSamplingInterval_t)(unsafe.Pointer(Time)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevSetDeviceCPUSamplingInterval(cTime, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cTimeAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetLastError function as declared in lib/cndev.h:1759
func GetLastError() Ret_t {
	__ret := C.cndevGetLastError()
	__v := (Ret_t)(__ret)
	return __v
}

// GetRetiredPages function as declared in lib/cndev.h:1773
func GetRetiredPages(Retirepage *RetiredPageInfo_t, DevId int32) Ret_t {
	cRetirepage, cRetirepageAllocMap := (*C.cndevRetiredPageInfo_t)(unsafe.Pointer(Retirepage)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetRetiredPages(cRetirepage, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cRetirepageAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetRetiredPagesStatus function as declared in lib/cndev.h:1787
func GetRetiredPagesStatus(Retirepagestatus *RetiredPageStatus_t, DevId int32) Ret_t {
	cRetirepagestatus, cRetirepagestatusAllocMap := (*C.cndevRetiredPageStatus_t)(unsafe.Pointer(Retirepagestatus)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetRetiredPagesStatus(cRetirepagestatus, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cRetirepagestatusAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetRemappedRows function as declared in lib/cndev.h:1801
func GetRemappedRows(Rows *RemappedRow_t, DevId int32) Ret_t {
	cRows, cRowsAllocMap := (*C.cndevRemappedRow_t)(unsafe.Pointer(Rows)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetRemappedRows(cRows, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cRowsAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetRetiredPagesOperation function as declared in lib/cndev.h:1815
func GetRetiredPagesOperation(Operation *RetiredPageOperation_t, DevId int32) Ret_t {
	cOperation, cOperationAllocMap := (*C.cndevRetiredPageOperation_t)(unsafe.Pointer(Operation)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetRetiredPagesOperation(cOperation, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cOperationAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetCardVfState function as declared in lib/cndev.h:1831
func GetCardVfState(Vfstate *CardVfState_t, DevId int32) Ret_t {
	cVfstate, cVfstateAllocMap := (*C.cndevCardVfState_t)(unsafe.Pointer(Vfstate)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCardVfState(cVfstate, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cVfstateAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLULinkPortMode function as declared in lib/cndev.h:1847
func GetMLULinkPortMode(Mode *MLULinkPortMode_t, DevId int32, Port int32) Ret_t {
	cMode, cModeAllocMap := (*C.cndevMLULinkPortMode_t)(unsafe.Pointer(Mode)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cPort, cPortAllocMap := (C.int)(Port), cgoAllocsUnknown
	__ret := C.cndevGetMLULinkPortMode(cMode, cDevId, cPort)
	runtime.KeepAlive(cPortAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cModeAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// SetMLULinkPortMode function as declared in lib/cndev.h:1863
func SetMLULinkPortMode(Mode *MLULinkPortMode_t, DevId int32, Port int32) Ret_t {
	cMode, cModeAllocMap := (*C.cndevMLULinkPortMode_t)(unsafe.Pointer(Mode)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cPort, cPortAllocMap := (C.int)(Port), cgoAllocsUnknown
	__ret := C.cndevSetMLULinkPortMode(cMode, cDevId, cPort)
	runtime.KeepAlive(cPortAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cModeAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetRoceCtrl function as declared in lib/cndev.h:1879
func GetRoceCtrl(Ctrl *MLULinkPortRoceCtrl_t, DevId int32, Port int32) Ret_t {
	cCtrl, cCtrlAllocMap := (*C.cndevMLULinkPortRoceCtrl_t)(unsafe.Pointer(Ctrl)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cPort, cPortAllocMap := (C.int)(Port), cgoAllocsUnknown
	__ret := C.cndevGetRoceCtrl(cCtrl, cDevId, cPort)
	runtime.KeepAlive(cPortAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCtrlAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLULinkPortNumber function as declared in lib/cndev.h:1887
func GetMLULinkPortNumber(DevId int32) int32 {
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetMLULinkPortNumber(cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	__v := (int32)(__ret)
	return __v
}

// GetTinyCoreUtilization function as declared in lib/cndev.h:1903
func GetTinyCoreUtilization(Util *TinyCoreUtilization_t, DevId int32) Ret_t {
	cUtil, cUtilAllocMap := (*C.cndevTinyCoreUtilization_t)(unsafe.Pointer(Util)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetTinyCoreUtilization(cUtil, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cUtilAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetArmOsMemoryUsage function as declared in lib/cndev.h:1918
func GetArmOsMemoryUsage(Mem *ArmOsMemoryInfo_t, DevId int32) Ret_t {
	cMem, cMemAllocMap := (*C.cndevArmOsMemoryInfo_t)(unsafe.Pointer(Mem)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetArmOsMemoryUsage(cMem, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cMemAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetChipId function as declared in lib/cndev.h:1934
func GetChipId(Chipid *ChipId_t, DevId int32) Ret_t {
	cChipid, cChipidAllocMap := (*C.cndevChipId_t)(unsafe.Pointer(Chipid)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetChipId(cChipid, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cChipidAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLUFrequencyStatus function as declared in lib/cndev.h:1949
func GetMLUFrequencyStatus(Status *MLUFrequencyStatus_t, DevId int32) Ret_t {
	cStatus, cStatusAllocMap := (*C.cndevMLUFrequencyStatus_t)(unsafe.Pointer(Status)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetMLUFrequencyStatus(cStatus, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cStatusAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// UnlockMLUFrequency function as declared in lib/cndev.h:1961
func UnlockMLUFrequency(DevId int32) Ret_t {
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevUnlockMLUFrequency(cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetMLULinkPortIP function as declared in lib/cndev.h:1978
func GetMLULinkPortIP(Ip *MLULinkPortIP_t, DevId int32, Port int32) Ret_t {
	cIp, cIpAllocMap := (*C.cndevMLULinkPortIP_t)(unsafe.Pointer(Ip)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	cPort, cPortAllocMap := (C.int)(Port), cgoAllocsUnknown
	__ret := C.cndevGetMLULinkPortIP(cIp, cDevId, cPort)
	runtime.KeepAlive(cPortAllocMap)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cIpAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetCRCInfo function as declared in lib/cndev.h:1995
func GetCRCInfo(CrcInfo *CRCInfo_t, DevId int32) Ret_t {
	cCrcInfo, cCrcInfoAllocMap := (*C.cndevCRCInfo_t)(unsafe.Pointer(CrcInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetCRCInfo(cCrcInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cCrcInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetDDRInfo function as declared in lib/cndev.h:2013
func GetDDRInfo(DdrInfo *DDRInfo_t, DevId int32) Ret_t {
	cDdrInfo, cDdrInfoAllocMap := (*C.cndevDDRInfo_t)(unsafe.Pointer(DdrInfo)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetDDRInfo(cDdrInfo, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cDdrInfoAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// SetIpuFrequency function as declared in lib/cndev.h:2031
func SetIpuFrequency(Setipufreq *SetIpuFrequency_t, DevId int32) Ret_t {
	cSetipufreq, cSetipufreqAllocMap := (*C.cndevSetIpuFrequency_t)(unsafe.Pointer(Setipufreq)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevSetIpuFrequency(cSetipufreq, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cSetipufreqAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetProcessUtilization function as declared in lib/cndev.h:2050
func GetProcessUtilization(ProcessCount *uint32, ProcessUtil *ProcessUtilization_t, DevId int32) Ret_t {
	cProcessCount, cProcessCountAllocMap := (*C.uint)(unsafe.Pointer(ProcessCount)), cgoAllocsUnknown
	cProcessUtil, cProcessUtilAllocMap := (*C.cndevProcessUtilization_t)(unsafe.Pointer(ProcessUtil)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetProcessUtilization(cProcessCount, cProcessUtil, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cProcessUtilAllocMap)
	runtime.KeepAlive(cProcessCountAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}

// GetSupportedIpuFrequency function as declared in lib/cndev.h:2070
func GetSupportedIpuFrequency(Count *uint32, Ipufreq *SupportedIpuFrequency_t, DevId int32) Ret_t {
	cCount, cCountAllocMap := (*C.uint)(unsafe.Pointer(Count)), cgoAllocsUnknown
	cIpufreq, cIpufreqAllocMap := (*C.cndevSupportedIpuFrequency_t)(unsafe.Pointer(Ipufreq)), cgoAllocsUnknown
	cDevId, cDevIdAllocMap := (C.int)(DevId), cgoAllocsUnknown
	__ret := C.cndevGetSupportedIpuFrequency(cCount, cIpufreq, cDevId)
	runtime.KeepAlive(cDevIdAllocMap)
	runtime.KeepAlive(cIpufreqAllocMap)
	runtime.KeepAlive(cCountAllocMap)
	__v := (Ret_t)(__ret)
	return __v
}
